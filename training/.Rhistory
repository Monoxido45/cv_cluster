factorize(X$feed_mode)
as.numeric(X$feed_mode)
install.packages("mltools")
library(mltools)
one_hot(X$feed_mode)
new = one_hot(X$feed_mode)
new
X$feed_mode[1]
View(X)
a
a = matrix(0, nrow = 2, ncol = 2)
a[1]
a[, 1]
onehotencoder = function(data, column){
onehot = matrix(0, nrow = nrow(data), ncol = nlevels(data$column))
factors = as.numeric(X$feed_mode)
for (i in 1:nrow(data)){
if(is.na(data$column[i]) == TRUE){
onehot[, i] = rep(1/nlevels(data$column), nlevels(data$column))
}else{
onehot[data$column[i], i] = 1
}
}
return(onehot)
}
feed_mode.conv = onehotencoder(X, feed_mode)
X$feed_mode
X$feed_mode[39]
is.na(X$feed_mode[39])
onehotencoder = function(data, column){
onehot = matrix(0, nrow = nrow(data), ncol = nlevels(data$column))
factors = as.numeric(X$feed_mode)
for (i in 1:nrow(data)){
if(is.na(data$column[i]) == TRUE){
print("a")
onehot[, i] = rep(1/nlevels(data$column), nlevels(data$column))
}else{
onehot[data$column[i], i] = 1
}
}
return(onehot)
}
feed_mode.conv = onehotencoder(X, feed_mode)
is.na(X$feed_mode[1])
onehotencoder = function(data, column){
onehot = matrix(0, nrow = nrow(data), ncol = nlevels(data$column))
factors = as.numeric(X$feed_mode)
print(onehot)
for (i in 1:nrow(data)){
if(is.na(data$column[i]) == TRUE){
onehot[, i] = rep(1/nlevels(data$column), nlevels(data$column))
}else{
onehot[data$column[i], i] = 1
}
}
return(onehot)
}
feed_mode.conv = onehotencoder(X, feed_mode)
onehotencoder = function(data, column){
print(data$column)
onehot = matrix(0, nrow = nrow(data), ncol = nlevels(data$column))
factors = as.numeric(X$feed_mode)
for (i in 1:nrow(data)){
if(is.na(data$column[i]) == TRUE){
onehot[, i] = rep(1/nlevels(data$column), nlevels(data$column))
}else{
onehot[data$column[i], i] = 1
}
}
return(onehot)
}
feed_mode.conv = onehotencoder(X, feed_mode)
X[,1]
data.frame(colnames(X))
X[1,1]
onehotencoder = function(data, index){
onehot = matrix(0, nrow = nrow(data), ncol = nlevels(data[, index]))
factors = as.numeric(X$feed_mode)
for (i in 1:nrow(data)){
if(is.na(data$column[i]) == TRUE){
onehot[, i] = rep(1/nlevels(data[, index]), nlevels(data[, index]))
}else{
onehot[data[i, index], i] = 1
}
}
return(onehot)
}
feed_mode.conv = onehotencoder(X, 1)
onehotencoder = function(data, index){
onehot = matrix(0, nrow = nrow(data), ncol = nlevels(data[, index]))
factors = as.numeric(X$feed_mode)
for (i in 1:nrow(data)){
if(is.na(data[, index]) == TRUE){
onehot[, i] = rep(1/nlevels(data[, index]), nlevels(data[, index]))
}else{
onehot[data[i, index], i] = 1
}
}
return(onehot)
}
feed_mode.conv = onehotencoder(X, 1)
a = as.numeric(X$feed_mode)
nrow(a)
length(a)
nlevels(a)
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:nrow(data)){
if(is.na(factors[i]) == TRUE){
onehot[, i] = rep(1/nlvls, nlvls)
}else{
onehot[factors[i], i] = 1
}
}
return(onehot)
}
feed_mode.conv = onehotencoder(X, 1)
length(a)
nrow(X$feed_mode)
nrow(X)
a[60]
a[61]
a = matrix(0, ncol = 2, nrow = 2)
a[1, ]
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
return(onehot)
}
feed_mode.conv = onehotencoder(X, 1)
feed_mode.conv
colnames(feed.mode) = levels(X$feed_mode)
levels(X$feed_mode)
colnames(feed_mode.conv) = levels(X$feed_mode)
feed_mode.conv
mtree = make.simmap(elop.tree, feed_mode.conv, model = "ER")
library(ape)
library(ape)
library(phangorn)
library(phytools)
library(geiger)
library(magrittr)
library(geiger)
library(magrittr)
library(mltools)
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
return(onehot)
}
feed_mode.conv = onehotencoder(X, 1)
colnames(feed_mode.conv) = levels(X$feed_mode)
mtree = make.simmap(elop.tree, feed_mode.conv, model = "ER")
setwd("C:/Users/lucru/Estatística_UFSCar/ic_miguel_fapesp/training")
tree.string = "(D,(C,(A,B)));"
tree.obj = read.tree(text = tree.string)
plot(tree.obj, no.margin = TRUE, edge.width = 2)
# reading data, and plotting
X = read.csv("elopomorph.csv", row.names = 1)
feed.mode = setNames(X[, 1], rownames(X))
# defining the variable classifying the feed mode of the current specie
head(X)
elop.tree = read.tree("elopomorph.tre")
elop.tree
plotTree(elop.tree,type="fan",fsize=0.7,ftype="i",lwd=1)
cols<-setNames(c("red","blue"),levels(feed.mode))
tiplabels(pie=to.matrix(feed.mode[elop.tree$tip.label],
levels(feed.mode)),piecol=cols,cex=0.3)
# para fazer o gráfico
# plotTree(elop.tree,type="fan",fsize=0.7,ftype="i",lwd=1)
# cols<-setNames(c("red","blue"),levels(feed.mode))
# tiplabels(pie=to.matrix(feed.mode[elop.tree$tip.label],
#     levels(feed.mode)),piecol=cols,cex=0.3)
# add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
#     y=0.8*par()$usr[3],fsize=0.8)
# plotTree(elop.tree,type="fan",fsize=0.7,ftype="i",lwd=1)
#nodelabels(node=1:elop.tree$Nnode+Ntip(elop.tree),
#    pie=fitER$lik.anc, piecol=cols, cex=0.4)
#tiplabels(pie=to.matrix(feed.mode[elop.tree$tip.label],
#levels(feed.mode)), piecol=cols,cex=0.3)
#add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
#    y=0.8*par()$usr[3],fsize=0.8)
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
return(onehot)
}
feed_mode.conv = onehotencoder(X, 1)
colnames(feed_mode.conv) = levels(X$feed_mode)
mtree = make.simmap(elop.tree, feed_mode.conv, model = "ER")
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
return(onehot)
}
feed_mode.conv = onehotencoder(X, 1)
colnames(feed_mode.conv) = levels(X$feed_mode)
mtree = make.simmap(elop.tree, feed_mode.conv, model)
X = read.csv("elopomorph.csv", row.names = 1)
max.tl = setNames(X[, 2], rownames(X))
max.tl
X = read.csv("elopomorph.csv", row.names = 1)
max.tl = setNames(X[, 2], rownames(X))
max.tl
max.tl[1]
X = read.csv("elopomorph.csv", row.names = 1)
max.tl = setNames(X[, 2], rownames(X))
max.tl
match(NA, max.tl)
anc.ML
?anc.ML
X = read.csv("elopomorph.csv", row.names = 1)
max.tl = setNames(X[, 2], rownames(X))
del.ind = match(NA, max.tl)
new_max.tl = max.tl[-del.ind]
new_max.tl
fit = anc.ML(elop.tree, new_max.tl, model = "BM")
fit = anc.ML(elop.tree, new_max.tl, model = "BM")
fit
fit = anc.ML(elop.tree, new_max.tl, model = "BM")
fit$missing.x
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
return(onehot)
}
ind.del = match(NA, feed.mode)
new_feed.mode = feed.mode[-ind.del]
mtree = make.simmap(elop.tree, new_feed.mode, model)
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
return(onehot)
}
ind.del = match(NA, feed.mode)
new_feed.mode = feed.mode[-ind.del]
mtree = make.simmap(elop.tree, new_feed.mode)
?make.simmap
new_feed.mode
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
return(onehot)
}
ind.del = match(NA, feed.mode)
new_feed.mode = feed.mode[-ind.del]
fit = anc.ML(elop.tree, new_feed.mode, model = "BM")
new_feed.mode
length(new_feed.mode)
new_feed.mode = as.numeric(feed.mode[-ind.del])
new_feed.mode
new_feed.mode.names = colnames(feed.mode[-ind.del])
names(feed.mode[-ind.del])
new_feed.mode = as.numeric(feed.mode[-ind.del])
names(new_feed.mode) = new_feed.mode.names
fit = anc.ML(elop.tree, new_feed.mode, model = "BM")
fit = anc.ML(elop.tree, new_feed.mode)
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
return(onehot)
}
ind.del = match(NA, feed.mode)
new_feed.mode.names = names(feed.mode[-ind.del])
new_feed.mode = as.numeric(feed.mode[-ind.del])
names(new_feed.mode) = new_feed.mode.names
fit = anc.ML(elop.tree, new_feed.mode)
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
return(onehot)
}
ind.del = match(NA, feed.mode)
new_feed.mode.names = names(feed.mode[-ind.del])
new_feed.mode = as.numeric(feed.mode[-ind.del])
names(new_feed.mode) = new_feed.mode.names
fit = anc.ML(elop.tree, new_feed.mode)
fit$missing.x
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
return(onehot)
}
ind.del = match(NA, feed.mode)
new_feed.mode = feed.mode[-ind.del]
names(new_feed.mode) = new_feed.mode.names
fit = anc.ML(elop.tree, new_feed.mode)
row.names(X)
a
row.names(a) = c("a", "b")
a
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
row.names(onehot) = row.names(data)
return(onehot)
}
feed.mode = onehotencoder(X, 1)
View(feed.mode)
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
row.names(onehot) = row.names(data)
return(onehot)
}
feed.mode = onehotencoder(X, 1)
fit_discrete = make.simmap(elop.tree, feed.mode, model = "ARD")
levels(X$feed_mode)
View(feed.mode)
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
row.names(onehot) = row.names(data)
col.names(onehot) = levels(data[, index])
return(onehot)
}
feed.mode = onehotencoder(X, 1)
onehotencoder = function(data, index){
nlvls = nlevels(data[, index])
onehot = matrix(0, nrow = nrow(data), ncol = nlvls)
factors = as.numeric(data[, index])
for (i in 1:length(factors)){
if(is.na(factors[i]) == TRUE){
onehot[i, ] = rep(1/nlvls, nlvls)
}else{
onehot[i, factors[i]] = 1
}
}
row.names(onehot) = row.names(data)
colnames(onehot) = levels(data[, index])
return(onehot)
}
feed.mode = onehotencoder(X, 1)
fit_discrete = make.simmap(elop.tree, feed.mode, model = "ARD")
# pacotes usados
library(ggplot2)
library(ggthemes)
library(magrittr)
# exercicio 3 inteiro
turma_a = c(21, 23, 13, 19, 13, 19, 20, 21 ,16)
# pacotes usados
library(ggplot2)
# pacotes usados
library(ggplot2)
library(ggthemes)
# analisando o boxplot
escolas %>%
ggplot(aes(x = turmas, y = notas)) +
geom_boxplot(fill = turmas)+
theme_light(base_size = 12) +
labs(title = "Boxplot das turmas com relação as notas",
x = "Turmas",
y = "Notas")
escolas = data.frame(notas  = c(turma_a, turma_b, turma_c,
turma_d, turma_e),
turmas = c(rep("a", length(turma_a)),
rep("b", length(turma_b)),
rep("c", length(turma_c)),
rep("d", length(turma_d)),
rep("e", length(turma_e))))
# exercicio 3 inteiro
turma_a = c(21, 23, 13, 19, 13, 19, 20, 21 ,16)
turma_b = c(17, 14, 24, 20, 24, 23, 16, 15, 24)
turma_c = c(28, 30, 29, 24, 27, 30, 28, 28, 23)
turma_d = c(19, 28, 26, 26, 19, 24, 24, 23, 22)
turma_e = c(21, 14, 13, 19, 15, 15, 10, 18, 20)
escolas = data.frame(notas  = c(turma_a, turma_b, turma_c,
turma_d, turma_e),
turmas = c(rep("a", length(turma_a)),
rep("b", length(turma_b)),
rep("c", length(turma_c)),
rep("d", length(turma_d)),
rep("e", length(turma_e))))
# analisando o boxplot
escolas %>%
ggplot(aes(x = turmas, y = notas)) +
geom_boxplot(fill = turmas)+
theme_light(base_size = 12) +
labs(title = "Boxplot das turmas com relação as notas",
x = "Turmas",
y = "Notas")
# analisando o boxplot
escolas %>%
ggplot(aes(x = turmas, y = notas, fill = turmas)) +
geom_boxplot()+
theme_light(base_size = 12) +
labs(title = "Boxplot das turmas com relação as notas",
x = "Turmas",
y = "Notas")
# analisando o boxplot
escolas %>%
ggplot(aes(x = turmas, y = notas, fill = turmas)) +
geom_boxplot()+
theme_light(base_size = 12) +
labs(title = "Boxplot das turmas com relação as notas",
x = "Turmas",
y = "Notas")
escolas.modelo = aov(data = escolas,
notas~turmas)
summary(escolas.modelo)
install.packages("PMCMRplus")
# rejeita-se H0 e portanto,  pelo menos um tratamento pedagocio tem efeito na
# variavel final
library(PMCMRplus)
escolas.comp = tukeyTest(x = escolas.modelo, 'turmas', conf.level = 0.99)
summary(escolas.comp)
